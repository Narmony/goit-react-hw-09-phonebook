{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactsForm/contactsForm.module.css","components/ContactsList/contactsList.module.css","components/Filter/filter.module.css","../node_modules/uuid/dist/esm-browser/rng.js","redux/contacts/contacts-operations.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","components/ContactsForm/ContactsForm.jsx","redux/contacts/contacts-selectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","getRandomValues","contactsOperations","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","message","addContact","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","toString","substr","stringify","offset","arguments","toLowerCase","v4","options","buf","rnds","random","ContactsForm","useDispatch","useState","user","setUser","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","reset","onSubmit","preventDefault","className","styles","form","htmlFor","name_input","onChange","id","type","pattern","title","required","number_input","Button","variant","add_Btn","getFilter","state","contacts","filter","getVisibleContacts","createSelector","allContacts","normalizedFilter","includes","loading","ContactsList","useSelector","contactSelectors","contacts_block","contacts_title","map","contact_item","size","button","onClick","Filter","searchWrap","contactsActions","target","ContactsView","isLoadingContacts","contactsSelectors","useEffect"],"mappings":"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","file":"static/js/ContactsView.422491eb.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactsForm_form__2v-iC\",\"add_Btn\":\"contactsForm_add_Btn__2YOYD\",\"name_input\":\"contactsForm_name_input__3gjZp\",\"number_input\":\"contactsForm_number_input__4ztsY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"contactsList_name__3OkeU\",\"contacts_block\":\"contactsList_contacts_block__15lQl\",\"contact_item\":\"contactsList_contact_item__1N_G3\",\"contacts_title\":\"contactsList_contacts_title__3Kxou\",\"button\":\"contactsList_button__1C19z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchWrap\":\"filter_searchWrap__3TG7j\",\"title\":\"filter_title__212N-\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\n// axios.defaults.baseURL = 'http://localhost:4040';\n// axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\nconst addContact =\n  ({ name, number }) =>\n  async dispatch => {\n    const contact = { name, number };\n\n    dispatch(addContactRequest());\n\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      dispatch(addContactSuccess(data));\n    } catch (error) {\n      dispatch(addContactError(error.message));\n    }\n  };\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\nconst contactsOperations = { fetchContacts, addContact, deleteContact };\nexport default contactsOperations;\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport Button from 'react-bootstrap/Button';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport styles from './contactsForm.module.css';\n\nexport default function ContactsForm() {\n  const dispatch = useDispatch();\n  const [user, setUser] = useState({\n    name: '',\n    number: '',\n  });\n\n  const nameInputId = uuidv4();\n  const numberInputId = uuidv4();\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    setUser({ ...user, [name]: value });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(contactsOperations.addContact(user));\n    reset();\n  };\n\n  const reset = () => {\n    setUser({ name: '', number: '' });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Phonebook</h2>\n      <div className={styles.form}>\n        <label htmlFor={nameInputId} className={styles.name_input}>\n          <span>Name</span>\n          <input\n            onChange={handleChange}\n            id={nameInputId}\n            type=\"text\"\n            name=\"name\"\n            value={user.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label htmlFor={numberInputId} className={styles.number_input}>\n          <span>Number</span>\n          <input\n            onChange={handleChange}\n            id={numberInputId}\n            type=\"tel\"\n            name=\"number\"\n            value={user.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <Button\n            type=\"submit\"\n            variant=\"outline-dark\"\n            className={styles.add_Btn}\n          >\n            Add contact\n          </Button>\n        </label>\n      </div>\n    </form>\n  );\n}\n\n// class ContactsForm extends Component {\n// state = {\n//   name: '',\n//   number: '',\n//   };\n\n//   nameInputId = uuidv4();\n//   numberInputId = uuidv4();\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     const { onSubmit } = this.props;\n//     onSubmit(this.state);\n//     // this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//         <h2>Phonebook</h2>\n//         <div className={styles.form}>\n//           <label htmlFor={this.nameInputId} className={styles.name_input}>\n//             <span>Name</span>\n//             <input\n//               onChange={this.handleChange}\n//               id={this.nameInputId}\n//               type=\"text\"\n//               name=\"name\"\n//               value={this.state.name}\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//               required\n//             />\n//           </label>\n\n//           <label htmlFor={this.numberInputId} className={styles.number_input}>\n//             <span>Number</span>\n//             <input\n//               onChange={this.handleChange}\n//               id={this.numberInputId}\n//               type=\"tel\"\n//               name=\"number\"\n//               value={this.state.number}\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//               required\n//             />\n//             <Button\n//               type=\"submit\"\n//               variant=\"outline-dark\"\n//               className={styles.add_Btn}\n//             >\n//               Add contact\n//             </Button>\n//           </label>\n//         </div>\n//       </form>\n//     );\n//   }\n// }\n\n// ContactsForm.propTypes = {\n//   initialState: PropTypes.object,\n//   onSubmit: PropTypes.func,\n// };\n\n// const mapDispatchToProps = dispatch => ({\n//   onSubmit: value => dispatch(contactsOperations.addContact(value)),\n// });\n\n// export default connect(null, mapDispatchToProps)(ContactsForm);\n","import {createSelector} from '@reduxjs/toolkit';\n \n const getLoading = state => state.contacts.loading;\n\n\n const getAllContacts = (state) => state.contacts.contacts;\n\n const getFilter = (state) => state.contacts.filter;\n\n// export const getVisibleContacts = state =>{\n//     const filter = getFilter(state);\n//     const allContacts = getAllContacts(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return (allContacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     ));\n// }\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (allContacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport default {\n    getLoading,\n    getFilter,\n    // getVisibleContacts,\n\n}\n\n// export const getVisibleContacts = state => {\n//     const filter = getFilter(state);\n//     const allContacts = getAllContacts(state);\n//     const normalizedFilter = filter.toLowerCase();\n//      return allContacts.filter(({ name }) =>\n//        name.toLowerCase().includes(normalizedFilter)\n//      );\n\n// }\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport * as contactSelectors from '../../redux/contacts/contacts-selectors';\nimport Button from 'react-bootstrap/Button';\nimport styles from './contactsList.module.css';\n\nfunction ContactsList() {\n  const contacts = useSelector(contactSelectors.getVisibleContacts);\n  const dispatch = useDispatch();\n  // const onDelete = useCallback(\n  //   () => dispatch(contactsOperations.deleteContact(id)),\n  //   [dispatch],\n  // );\n\n  return (\n    <div className={styles.contacts_block}>\n      <span className={styles.contacts_title}>Contacts:</span>\n      <ul>\n        {contacts.map(({ name, number, id }) => (\n          <li className={styles.contact_item} key={id}>\n            <span className={styles.name}>{name}</span>\n            <span className={styles.number}>{number}</span>\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              className={styles.button}\n              onClick={() => dispatch(contactsOperations.deleteContact(id))}\n            >\n              Delete\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// ContactsList.propTypes = {\n//   contacts: PropTypes.array.isRequired,\n// };\n\nexport default ContactsList;\n","import styles from './filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport contactSelectors from '../../redux/contacts/contacts-selectors';\n\nexport default function Filter() {\n  const value = useSelector(contactSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label className={styles.searchWrap}>\n      <span className={styles.title}>Find contacts by name:</span>\n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\n      />\n    </label>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactsForm from '../components/ContactsForm';\nimport ContactsList from '../components/ContactsList';\nimport Filter from '../components/Filter';\nimport contactsOperations from '../redux/contacts/contacts-operations';\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\nimport '../styles.css';\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(contactsSelectors.getLoading);\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <ContactsForm />\n      {isLoadingContacts && <h1>Loading...</h1>}\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n}\n\n// class ContactsView extends Component {\n//   componentDidMount() {\n//     this.props.fetchContacts();\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"app\">\n//         <ContactsForm />\n//         {this.props.isLoadingContacts && <h1>Loading...</h1>}\n//         <Filter />\n//         <ContactsList />\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   isLoadingContacts: contactsSelectors.getLoading(state),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}