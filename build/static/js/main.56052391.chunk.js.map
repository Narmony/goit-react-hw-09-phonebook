{"version":3,"sources":["redux/contacts/contacts-actions.js","components/Container/container.module.css","components/PrivateRoute.js","components/PublicRoute.js","components/Navigation.js","image/defaultAvatar.png","components/UserMenu.js","components/AuthNav.js","components/AppBar.js","components/Container/Container.js","App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","index.js","redux/auth/auth-actions.js","redux/auth/auth-reducer.js","redux/auth/auth-operations.js","redux/auth/auth-selectors.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","module","exports","PrivateRoute","isAuthenticated","redirectTo","children","routeProps","isLoggedIn","useSelector","authSelectors","getIsAuthenticated","to","PublicRoute","restricted","styles","link","display","textDecoration","padding","fontSize","fontWeight","color","activeLink","Navigation","exact","style","activeStyle","container","alignItems","avatar","marginRight","name","UserMenu","getUserName","dispatch","useDispatch","onLogout","useCallback","authOperations","logOut","src","defaultAvatar","alt","width","Button","variant","type","onClick","AuthNav","header","justifyContent","borderBottom","AppBar","Container","className","HomeView","lazy","RegisterView","LoginView","ContactsView","App","useEffect","console","log","getCurrentUser","fallback","path","contacts","createReducer","state","payload","filter","id","loading","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","auth","persistReducer","authReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","user","authActions","__","token","error","axios","defaults","baseURL","headers","common","Authorization","register","credentials","a","post","response","data","message","logIn","getState","persistedToken","get"],"mappings":"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","file":"static/js/main.56052391.chunk.js","sourcesContent":["// import { v4 as uuidv4 } from 'uuid';\n\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactError');\n\n\n\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\n// export default { addContactRequest, addContactSuccess, addContactError, deleteContact, changeFilter };\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container_container__3TiUU\"};","import { Route, Redirect } from 'react-router-dom';\n// import { connect } from 'react-redux';\n\nimport { useSelector } from 'react-redux';\n\nimport { authSelectors } from '../redux/auth';\n\n/**\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\n * - В противном случае рендерит Redirect на /login\n */\n\nexport default function PrivateRoute({\n  isAuthenticated,\n  redirectTo,\n  children,\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <Route {...routeProps}>\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}{' '}\n    </Route>\n  );\n}\n\n// const PrivateRoute = ({\n//   component: Component,\n//   isAuthenticated,\n//   redirectTo,\n//   ...routeProps\n// }) => (\n//   <Route\n//     {...routeProps}\n//     render={props =>\n//       isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\n//     }\n//   />\n// );\n\n// const mapStateToProps = state => ({\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\n// });\n\n// export default connect(mapStateToProps)(PrivateRoute);\n","import { Route, Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\n// import { connect } from 'react-redux';\nimport { authSelectors } from '../redux/auth';\n\n/**\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\n * - В противном случае рендерит компонент\n */\n\nexport default function PublicRoute({\n  // component: Component,\n\n  isAuthenticated,\n  redirectTo,\n  children,\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <Route {...routeProps}>\n      {isLoggedIn && routeProps.restricted ? (\n        <Redirect to={redirectTo} />\n      ) : (\n        children\n      )}\n    </Route>\n  );\n}\n\n// render={props =>\n//       isAuthenticated && routeProps.restricted ? (\n//         <Redirect to={redirectTo} />\n//       ) : (\n//         <Component {...props} />\n//       )\n//     }\n\n// const PublicRoute = ({\n//   component: Component,\n//   isAuthenticated,\n//   redirectTo,\n//   ...routeProps\n// }) => (\n//   <Route\n//     {...routeProps}\n//     render={props =>\n//       isAuthenticated && routeProps.restricted ? (\n//         <Redirect to={redirectTo} />\n//       ) : (\n//         <Component {...props} />\n//       )\n//     }\n//   />\n// );\n\n// const mapStateToProps = state => ({\n//   isAuthenticated: authSelectors.getIsAuthenticated(state),\n// });\n\n// export default connect(mapStateToProps)(PublicRoute);\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { authSelectors } from '../redux/auth';\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontSize: 22,\n    fontWeight: 600,\n    color: '#cce0ff',\n  },\n\n  activeLink: {\n    color: '#0066ff',\n    fontSize: 32,\n  },\n};\n\nexport default function Navigation() {\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n\n  return (\n    <nav>\n      <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\n        Home\n      </NavLink>\n\n      {isLoggedIn && (\n        <NavLink\n          to=\"/contacts\"\n          exact\n          style={styles.link}\n          activeStyle={styles.activeLink}\n        >\n          Contacts\n        </NavLink>\n      )}\n    </nav>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/defaultAvatar.bfb337f9.png\";","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authSelectors, authOperations } from '../redux/auth';\nimport defaultAvatar from '../image/defaultAvatar.png';\nimport Button from 'react-bootstrap/Button';\n\nconst styles = {\n  container: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  avatar: {\n    marginRight: 4,\n  },\n  name: {\n    fontWeight: 700,\n    marginRight: 12,\n  },\n};\n\n// const mapStateToProprs = state => ({\n//   name: authSelectors.getUserName(state),\n//   avatar: defaultAvatar,\n// });\n\n// const mapDispatchToProps = {\n//   onLogout: authOperations.logOut,\n// };\n\n// export default connect(mapStateToProprs, mapDispatchToProps)(UserMenu);\n\nexport default function UserMenu() {\n  const name = useSelector(authSelectors.getUserName);\n  const dispatch = useDispatch();\n  const onLogout = useCallback(\n    () => dispatch(authOperations.logOut()),\n    [dispatch],\n  );\n  return (\n    <div style={styles.container}>\n      <img src={defaultAvatar} alt=\"\" width=\"32\" style={styles.avatar} />\n      <span style={styles.name}>Welcome, {name}</span>\n      <Button variant=\"outline-primary\" type=\"button\" onClick={onLogout}>\n        Logout\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Button from 'react-bootstrap/Button';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n\nconst styles = {\n  link: {\n    display: 'inline-block',\n    textDecoration: 'none',\n    padding: 12,\n    fontWeight: 700,\n    color: '#2A363B',\n  },\n  activeLink: {\n    color: '#E84A5F',\n  },\n};\n\nconst AuthNav = () => (\n  <div>\n    <NavLink\n      to=\"/register\"\n      exact\n      style={styles.link}\n      activeStyle={styles.activeLink}\n    >\n      <Button variant=\"outline-primary\"> Sign up</Button>\n    </NavLink>\n    <NavLink\n      to=\"/login\"\n      exact\n      style={styles.link}\n      activeStyle={styles.activeLink}\n    >\n      <Button variant=\"outline-primary\"> Log in</Button>\n    </NavLink>\n  </div>\n);\n\nexport default AuthNav;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport Navigation from './Navigation';\nimport UserMenu from './UserMenu';\nimport AuthNav from './AuthNav';\nimport { authSelectors } from '../redux/auth';\n\nconst styles = {\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: '1px solid #2A363B',\n  },\n};\n\nexport default function AppBar() {\n  const isLoggedIn = useSelector(authSelectors.getIsAuthenticated);\n  return (\n    <header style={styles.header}>\n      <Navigation />\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\n    </header>\n  );\n}\n","import React from 'react';\nimport styles from './container.module.css';\n\nconst Container = ({ children }) => <div className={styles.container}>{children}</div>;\n\nexport default Container;","import React, { Suspense, lazy, useEffect } from 'react';\nimport { Switch } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\nimport { authOperations } from './redux/auth';\n\nimport AppBar from './components/AppBar.js';\nimport Container from './components/Container';\n\nconst HomeView = lazy(() =>\n  import('./views/HomeView' /* webpackChunkName: \"HomeView\" */),\n);\nconst RegisterView = lazy(() =>\n  import('./views/RegisterView' /* webpackChunkName: \"RegisterView\" */),\n);\nconst LoginView = lazy(() =>\n  import('./views/LoginView' /* webpackChunkName: \"LoginView\" */),\n);\nconst ContactsView = lazy(() =>\n  import('./views/ContactsView' /* webpackChunkName: \"ContactsView\" */),\n);\n\nexport default function App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    console.log('useEffect');\n    dispatch(authOperations.getCurrentUser());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <AppBar />\n\n      <Suspense fallback={<p>Download...</p>}>\n        <Switch>\n          <PublicRoute exact path=\"/\">\n            <HomeView />\n          </PublicRoute>\n\n          <PublicRoute path=\"/register\" restricted redirectTo=\"/contacts\">\n            <RegisterView />\n          </PublicRoute>\n\n          <PublicRoute path=\"/login\" restricted redirectTo=\"/contacts\">\n            <LoginView />\n          </PublicRoute>\n\n          <PrivateRoute path=\"/contacts\" redirectTo=\"/login\">\n            <ContactsView />\n          </PrivateRoute>\n        </Switch>\n      </Suspense>\n    </Container>\n  );\n}\n\n// class App extends Component {\n//   componentDidMount() {\n//     this.props.onGetCurrentUser();\n//   }\n//   render() {\n//     return (\n//       <Container>\n//         <AppBar />\n\n//         <Suspense fallback={<p>Download...</p>}>\n//           <Switch>\n//             <PublicRoute exact path=\"/\" component={HomeView} />\n//             <PublicRoute\n//               path=\"/register\"\n//               restricted\n//               redirectTo=\"/contacts\"\n//               component={RegisterView}\n//             />\n//             <PublicRoute\n//               path=\"/login\"\n//               restricted\n//               redirectTo=\"/contacts\"\n//               component={LoginView}\n//             />\n//             <PrivateRoute\n//               path=\"/contacts\"\n//               redirectTo=\"/login\"\n//               component={ContactsView}\n//             />\n//           </Switch>\n//         </Suspense>\n//       </Container>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = {\n//   onGetCurrentUser: authOperations.getCurrentUser,\n// };\n\n// export default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\n// const checkName = (state, { payload }) => {\n//   const checkedName = state.map(contact => contact.name).includes(payload.name);\n//   if (checkedName) {\n//     alert(`${payload.name} is already in contacts`);\n//     return;\n//   }\n//   return [...state, payload];\n// };\n\nconst contacts = createReducer([], {\n  [fetchContactsSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n// const error => createReducer(null, {\n\n// })\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport { authReducer } from './auth';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n\n  logger,\n];\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nconst store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","import { createAction } from '@reduxjs/toolkit';\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\n\nexport default {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authActions from './auth-actions';\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: (_, __) => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: (_, __) => null,\n});\n\nconst error = createReducer(null, {\n  [authActions.registerError]: (_, { payload }) => payload,\n  [authActions.loginError]: (_, { payload }) => payload,\n  [authActions.logoutError]: (_, { payload }) => payload,\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\n});\n\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.logoutSuccess]: () => false,\n});\n\nexport default combineReducers({\n  user,\n  isAuthenticated,\n  token,\n  error,\n});\n\n// q@wer.com\n// qwertyu\n\n// a@sdf.com\n","import axios from 'axios';\nimport authActions from './auth-actions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\n/*\n * POST @ /users/signup\n * body { name, email, password }\n *\n * После успешной регистрации добавляем токен в HTTP-заголовок\n */\nconst register = credentials => async dispatch => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post('/users/signup', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.registerSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\n/*\n * POST @ /users/login\n * body:\n *    { email, password }\n *\n * После успешного логина добавляем токен в HTTP-заголовок\n */\nconst logIn = credentials => async dispatch => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post('/users/login', credentials);\n\n    token.set(response.data.token);\n    dispatch(authActions.loginSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\n/*\n * POST @ /users/logout\n * headers:\n *    Authorization: Bearer token\n *\n * 1. После успешного логаута, удаляем токен из HTTP-заголовка\n */\nconst logOut = () => async dispatch => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n\n    dispatch(authActions.logoutSuccess());\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\n/*\n * GET @ /users/current\n * headers:\n *    Authorization: Bearer token\n *\n * 1. Забираем токен из стейта через getState()\n * 2. Если токена нет, выходим не выполняя никаких операций\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\n */\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n\n  try {\n    const response = await axios.get('/users/current');\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\nexport default { register, logOut, logIn, getCurrentUser };\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\n\nconst getUserName = state => state.auth.user.name;\n\nexport default {\n  getIsAuthenticated,\n  getUserName,\n};\n"],"sourceRoot":""}